[{"C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\index.js":"1","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\App.js":"2","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\reportWebVitals.js":"3","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\routers\\AppRouter.jsx":"4","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\routers\\router.js":"5","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\login\\Login.js":"6","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\Home.js":"7","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\login\\banner\\index.jsx":"8","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\services\\login.js":"9","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\services\\api.js":"10","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\header\\HomeHeader.js":"11","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\content\\HomeContent.js":"12","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\services\\home.js":"13","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\userInfo\\UserInfo.js":"14","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\homeInfo\\HomeInfo.js":"15","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\test\\Test.js":"16","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\changePassword\\ChangePassword.js":"17","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\user\\UserLogout.js":"18","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\user\\UserApply.js":"19","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\user\\UserRegister.js":"20","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\user\\UserSche.js":"21","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\train\\Train.js":"22","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\outbound\\Outbound.js":"23","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\company\\Company.js":"24","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\company\\Workplace.js":"25","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\user\\UserAccount.js":"26"},{"size":455,"mtime":1607910976078,"results":"27","hashOfConfig":"28"},{"size":181,"mtime":1607649039869,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":499162500000,"results":"30","hashOfConfig":"28"},{"size":842,"mtime":1611899981363,"results":"31","hashOfConfig":"28"},{"size":344,"mtime":1607840434393,"results":"32","hashOfConfig":"28"},{"size":38039,"mtime":1608625346303,"results":"33","hashOfConfig":"28"},{"size":565,"mtime":1608606163534,"results":"34","hashOfConfig":"28"},{"size":660,"mtime":1608629143526,"results":"35","hashOfConfig":"28"},{"size":1335,"mtime":1608272833433,"results":"36","hashOfConfig":"28"},{"size":1252,"mtime":1608282867119,"results":"37","hashOfConfig":"28"},{"size":3676,"mtime":1609232376995,"results":"38","hashOfConfig":"28"},{"size":9002,"mtime":1608622119819,"results":"39","hashOfConfig":"28"},{"size":8824,"mtime":1608692263748,"results":"40","hashOfConfig":"28"},{"size":17404,"mtime":1608275210834,"results":"41","hashOfConfig":"28"},{"size":2334,"mtime":1608705819346,"results":"42","hashOfConfig":"28"},{"size":15628,"mtime":1608799426712,"results":"43","hashOfConfig":"28"},{"size":3081,"mtime":1607933159451,"results":"44","hashOfConfig":"28"},{"size":4015,"mtime":1608516495046,"results":"45","hashOfConfig":"28"},{"size":9517,"mtime":1608532662799,"results":"46","hashOfConfig":"28"},{"size":7577,"mtime":1608516510487,"results":"47","hashOfConfig":"28"},{"size":5900,"mtime":1608540743204,"results":"48","hashOfConfig":"28"},{"size":999,"mtime":1608112906250,"results":"49","hashOfConfig":"28"},{"size":2938,"mtime":1608621960243,"results":"50","hashOfConfig":"28"},{"size":8793,"mtime":1608516642249,"results":"51","hashOfConfig":"28"},{"size":7747,"mtime":1608516649545,"results":"52","hashOfConfig":"28"},{"size":15381,"mtime":1608619639187,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1t4h15x",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"56"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"56"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"56"},"C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\index.js",[],["117","118"],"C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\App.js",[],"C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\reportWebVitals.js",[],"C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\routers\\AppRouter.jsx",[],"C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\routers\\router.js",[],"C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\login\\Login.js",[],"C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\Home.js",[],"C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\login\\banner\\index.jsx",[],"C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\services\\login.js",[],"C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\services\\api.js",[],["119","120"],"C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\header\\HomeHeader.js",[],"C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\content\\HomeContent.js",[],"C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\services\\home.js",[],"C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\userInfo\\UserInfo.js",["121","122"],"import React from 'react'\r\nimport { Card, Alert, Form, Input, Radio, Button, DatePicker, Spin, Select, message } from 'antd';\r\nimport './userInfo.less'\r\nimport { CheckOutlined, } from '@ant-design/icons';\r\nimport homeApi from './../../../services/home'\r\n\r\nconst moment = require('moment');\r\n\r\nconst { Option } = Select;\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        sm: { span: 3 },\r\n    },\r\n};\r\nclass UserInfo extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            btnLoad: false,\r\n            loading: false,\r\n            userData: {},\r\n            companyList: [],\r\n            workList: [],\r\n            ed_start_time: '',\r\n            ed_end_time: '',\r\n            wo_start_time: '',\r\n            wo_end_time: '',\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.getUserInfo()\r\n        this.getCompany()\r\n    }\r\n    // 获取公司信息\r\n    getCompany = () => {\r\n        homeApi.userCompany().then(res => {\r\n            if (res.code === 0) {\r\n                this.setState({\r\n                    companyList: res.data,\r\n                })\r\n            } else {\r\n                message.error('公司信息获取失败')\r\n            }\r\n        })\r\n    }\r\n    // 获取职场信息\r\n    getWorkplace = (id) => {\r\n        homeApi.userWork(id).then(res => {\r\n            if (res.code === 0) {\r\n                this.setState({\r\n                    workList: res.data,\r\n                })\r\n            } else {\r\n                message.error(res.msg)\r\n            }\r\n        })\r\n    }\r\n\r\n    formRef = React.createRef()\r\n\r\n    // 初始获取用户信息\r\n    getUserInfo() {\r\n        const id = localStorage.getItem('infoId')\r\n        this.setState({ loading: true })\r\n        homeApi.userInfoDetail(id).then(res => {\r\n            if (res.code === 0) {\r\n                let userData = res.data;\r\n                userData.mobile = userData.mobile.substr(0, 3) + \"****\" + userData.mobile.substr(7);\r\n                this.formRef.current.setFieldsValue(res.data)  // 初始化form赋值\r\n                this.setState({\r\n                    userData,\r\n                    ed_start_time: userData.ed_start_time,\r\n                    ed_end_time: userData.ed_end_time,\r\n                    wo_start_time: userData.wo_start_time,\r\n                    wo_end_time: userData.wo_end_time,\r\n                })\r\n                setTimeout(() => {\r\n                    this.setState({ loading: false })\r\n                }, 1000);\r\n            } else {\r\n                this.setState({ loading: false })\r\n                message.error('获取失败')\r\n            }\r\n        }).catch(err => {\r\n            this.setState({ loading: false })\r\n            message.error('获取失败')\r\n        })\r\n    }\r\n\r\n    timeChange = (time, name) => {\r\n        let key = name;\r\n        this.state[key] = moment(time).format('YYYY-MM-DD')\r\n    }\r\n\r\n\r\n    render() {\r\n        const { loading, userData, companyList, workList } = this.state;\r\n\r\n        return (\r\n            <div className='userInfo_bg'>\r\n                <Spin spinning={loading}>\r\n                    <Card title=\"基本资料\" className='info_card'>\r\n                        <Alert message=\"温馨提示：平台注册会员需年满16周岁。 \" type=\"warning\" showIcon closable icon='' />\r\n                        <div className='info_form'>\r\n                            <Form ref={this.formRef} {...formItemLayout} onFinish={this.onSubmit}>\r\n                                <Form.Item\r\n                                    label=\"昵称\"\r\n                                    name='name'\r\n                                    rules={[{ required: true, message: '请输入您的昵称' }]}\r\n                                >\r\n                                    <Input placeholder=\"请输入2-25个字符\" autoComplete='off' />\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                    label=\"手机号码\"\r\n                                    name='mobile'\r\n                                    required\r\n                                >\r\n                                    <Input placeholder=\"请输入手机号码\" bordered={false} autoComplete='off' readOnly />\r\n                                </Form.Item>\r\n                                <Form.Item name=\"identity\" label=\"身份选择\" rules={[{ required: true, message: '请选择您的身份' }]}>\r\n                                    <Radio.Group>\r\n                                        <Radio value=\"公司白领\">公司白领</Radio>\r\n                                        <Radio value=\"在校学生\">在校学生</Radio>\r\n                                        <Radio value=\"下岗人士\">下岗人士</Radio>\r\n                                        <Radio value=\"家庭主妇\">家庭主妇</Radio>\r\n                                        <Radio value=\"残疾人\">残疾人</Radio>\r\n                                        <Radio value=\"其他\">其他</Radio>\r\n                                    </Radio.Group>\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                    label=\"邮寄地址\"\r\n                                    name='address'\r\n                                    rules={[{ required: true, message: '请输入您的邮寄地址' }]}\r\n                                >\r\n                                    <Input placeholder=\"请输入邮寄地址\" autoComplete='off' />\r\n                                </Form.Item>\r\n                                <Form.Item name=\"is_traffic\" label=\"是否从事过话务\" rules={[{ required: true, message: '请选择您是否从事过话务' }]}>\r\n                                    <Radio.Group>\r\n                                        <Radio value=\"是\">是</Radio>\r\n                                        <Radio value=\"否\">否</Radio>\r\n                                    </Radio.Group>\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                    name=\"week_work\"\r\n                                    label=\"期望周工作时间\"\r\n                                >\r\n                                    <Select placeholder=\"--请选择--\">\r\n                                        <Option value=\"5小时以下\">5小时以下</Option>\r\n                                        <Option value=\"5~10小时\">5~10小时</Option>\r\n                                        <Option value=\"10~20小时\">10~20小时</Option>\r\n                                        <Option value=\"20~30小时\">20~30小时</Option>\r\n                                        <Option value=\"30~40小时\">30~40小时</Option>\r\n                                        <Option value=\"40小时以上\">40小时以上</Option>\r\n                                    </Select>\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                    label=\"电子邮箱\"\r\n                                    name='email'\r\n                                >\r\n                                    <Input placeholder=\"请输入电子邮箱\" autoComplete='off' />\r\n                                </Form.Item>\r\n                                <Card title=\"最高学历\" bordered={false}>\r\n                                    <Form.Item label=\"时间\" style={{ marginBottom: 0, marginTop: 10 }} required>\r\n                                        <Form.Item\r\n                                            style={{ display: 'inline-block', }}\r\n                                            rules={[{ required: true, message: '请选择时间' }]}\r\n                                        >\r\n                                            <DatePicker format='YYYY-MM-DD' onChange={date => this.timeChange(date, 'ed_start_time')} />\r\n                                        </Form.Item>\r\n                                        <span\r\n                                            style={{ display: 'inline-block', width: '24px', lineHeight: '32px', textAlign: 'center' }}\r\n                                        >-</span>\r\n                                        <Form.Item style={{ display: 'inline-block', width: 'calc(50% - 12px)' }} rules={[{ required: true, message: '请选择时间' }]}>\r\n                                            <DatePicker format='YYYY-MM-DD' onChange={date => this.timeChange(date, 'ed_end_time')} />\r\n                                        </Form.Item>\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        label=\"毕业院校\"\r\n                                        name='school'\r\n                                        rules={[{ required: true, message: '请填写毕业院校' }]}\r\n                                    >\r\n                                        <Input placeholder=\"请填写毕业院校\" autoComplete='off' />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        name=\"education\"\r\n                                        label=\"学历\"\r\n                                        rules={[{ required: true, message: '请选择学历' }]}\r\n                                    >\r\n                                        <Select placeholder=\"--请选择--\">\r\n                                            <Option value=\"初中\">初中</Option>\r\n                                            <Option value=\"高中/中专\">高中/中专</Option>\r\n                                            <Option value=\"专科\">专科</Option>\r\n                                            <Option value=\"本科\">本科</Option>\r\n                                            <Option value=\"硕士\">硕士</Option>\r\n                                            <Option value=\"博士\">博士</Option>\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        label=\"专业\"\r\n                                        name='major'\r\n                                    >\r\n                                        <Input placeholder=\"请填写专业\" autoComplete='off' />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        name=\"academic_degree\"\r\n                                        label=\"学位\"\r\n                                    >\r\n                                        <Select placeholder=\"--请选择--\">\r\n                                            <Option value=\"学士\">学士</Option>\r\n                                            <Option value=\"硕士\">硕士</Option>\r\n                                            <Option value=\"博士\">博士</Option>\r\n                                        </Select>\r\n                                    </Form.Item>\r\n\r\n                                </Card>\r\n                                <Card title=\"工作经历\" bordered={false}>\r\n                                    <Alert message=\"丰富的工作经历能帮你取得更多的信任以及更多的工作机会。\" type=\"info\" />\r\n                                    <Form.Item label=\"时间\" style={{ marginBottom: 0, marginTop: 10 }} required>\r\n                                        <Form.Item\r\n                                            style={{ display: 'inline-block', }}\r\n                                            rules={[{ required: true, message: '请选择时间' }]}\r\n                                        >\r\n                                            <DatePicker format='YYYY-MM-DD' onChange={date => this.timeChange(date, 'wo_start_time')} />\r\n                                        </Form.Item>\r\n                                        <span\r\n                                            style={{ display: 'inline-block', width: '24px', lineHeight: '32px', textAlign: 'center' }}\r\n                                        >-</span>\r\n                                        <Form.Item style={{ display: 'inline-block', width: 'calc(50% - 12px)' }} rules={[{ required: true, message: '请选择时间' }]}>\r\n                                            <DatePicker format='YYYY-MM-DD' onChange={date => this.timeChange(date, 'wo_end_time')} />\r\n                                        </Form.Item>\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        label=\"工作单位\"\r\n                                        name='work'\r\n                                        rules={[{ required: true, message: '请填写工作单位' }]}\r\n                                    >\r\n                                        <Input placeholder=\"请填写工作单位\" autoComplete='off' />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        label=\"职务\"\r\n                                        name='post'\r\n                                        rules={[{ required: true, message: '请填写职务' }]}\r\n                                    >\r\n                                        <Input placeholder=\"请填写职务\" autoComplete='off' />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        label=\"工作描述\"\r\n                                        name='describe'\r\n                                        rules={[{ required: true, message: '请填写工作描述' }]}\r\n                                    >\r\n                                        <Input placeholder=\"请填写工作描述\" autoComplete='off' />\r\n                                    </Form.Item>\r\n\r\n                                </Card>\r\n                                <Card title=\"申请加入公司\" bordered={false}>\r\n                                    <Form.Item\r\n                                        label=\"公司\"\r\n                                        name='company'\r\n                                        rules={[{ required: true, message: '请填写公司' }]}\r\n                                    >\r\n                                        <Select placeholder=\"--请选择--\" onChange={this.onSelect}>\r\n                                            {\r\n                                                companyList.map((item, index) => {\r\n                                                    return (\r\n                                                        <Option key={index} value={item.id}>{item.name}</Option>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        label=\"职场\"\r\n                                        name='workplace'\r\n                                        rules={[{ required: true, message: '请填写职场' }]}\r\n                                    >   \r\n                                        <Select placeholder=\"--请选择--\">\r\n                                            {\r\n                                                workList.map((item, index) => {\r\n                                                    return (\r\n                                                        <Option key={index} value={item.id}>{item.name}</Option>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                </Card>\r\n                                <Button style={{ display: 'block', width: '20%', margin: '20px auto 0 auto' }} type='primary' loading={this.state.btnLoad} htmlType=\"submit\" icon={<CheckOutlined />}>\r\n                                    提交信息\r\n                            </Button>\r\n                            </Form>\r\n                        </div>\r\n                    </Card>\r\n                </Spin>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    onSubmit = (value) => {\r\n        value.id = this.state.userData.id\r\n        value.mobile = this.props.mobile\r\n        value.ed_start_time = this.state.ed_start_time\r\n        value.ed_end_time = this.state.ed_end_time\r\n        value.wo_start_time = this.state.wo_start_time\r\n        value.wo_end_time = this.state.wo_end_time\r\n        this.setState({ btnLoad: true })\r\n        homeApi.modifyInfo(value).then(\r\n            res => {\r\n                if (res.code === 0) {\r\n                    this.setState({ btnLoad: false })\r\n                    this.getUserInfo()\r\n                    message.success('吼~资料上传成功，等待审批中~')\r\n                } else {\r\n                    this.setState({ btnLoad: false })\r\n                    message.error('哎呀~更新失败了')\r\n                }\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    onSelect = (value) => {\r\n        console.log(value)\r\n        this.getWorkplace(value)\r\n    }\r\n}\r\n\r\nexport default UserInfo","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\homeInfo\\HomeInfo.js",[],"C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\test\\Test.js",["123","124","125"],"import React from 'react'\r\nimport { Card, Button, message, Modal, Tooltip, Form, Input, Alert, } from 'antd';\r\nimport './test.less'\r\nimport { PauseOutlined, AudioOutlined, CaretRightOutlined } from '@ant-design/icons';\r\nimport testApi from './../../../services/home'\r\nimport Recorder from 'js-audio-recorder';\r\n\r\nlet recorder = new Recorder();\r\n\r\n\r\nconst { TextArea } = Input;\r\nclass Test extends React.Component {\r\n    state = {\r\n        recordShow: false,\r\n        record_text: '您说的这种情况我们也很理解，但是咱们这张腾讯王卡相对其他产品，包括您在用的产品，它的性价比是最高的。第一呢，资费低，每月49元，第一年还每月赠送10元话费，相当于39元每月；第二呢，您激活当月正常充值话费，一次性金额在50元及以上，多享受100分钟的免费通话，还有1年价值240元的腾讯VIP会员使用；第三呢，更是有超多流量让您使用。腾讯类多达100款APP都是免流的，非腾讯使用流量也不用担心，每月20G全国通用流量，不用超也不会额外扣费，即使用超了，也有1天1元800M的日租宝可以使用。我这边帮您登记，免费给您配送下您先用用看的好吧~',\r\n        type_text: '上海市杨浦区包头路市光四村208号301上海市浦东新区高桥镇江东路1217栋8号401上海市宝山区兰岗路679号12月初电话联系配送上海市宝山区南蕰藻路108号上海市闵行区纪王镇赵家村西马40号103上海市青浦区天仙路1号101上海市奉贤区奉城镇建南新区19号302上海市浦东新区祝桥镇竹西村1713号上海市奉贤区泰日镇正泰路45号上海市嘉定区海波路118弄59号1402上海市浦东新区光泽路429弄15号502上海市松江区洞泾镇沪松公路铂金公馆1栋404上海市崇明区港沿镇鲁东区630号上海市奉贤区钱桥镇南星村周路704号上海市松江区久富路650号上海市浦东新区上南路6733弄46号502上海市宝山区美丹路1033弄12号2402室上海市浦东新区沪南路2000号上海市浦东新区新场镇石笋一村3号404室上海市金山区亭林镇六塔村1053室上海市宝山区庙行镇自立产业园3号楼北楼3层典范公司',\r\n        recordState: '',\r\n        record_file: null,\r\n        textShow: false,\r\n        isStart: false,\r\n        timer: null,\r\n        text_timer: '00:00',\r\n        textTimer: 1,\r\n        textStr: '',\r\n        btnLoading: false,\r\n        rateData: {\r\n            recording_accuracy: '',\r\n            accuracy: '',\r\n            speed: ''\r\n        }\r\n\r\n    }\r\n    componentWillMount() {\r\n        document.oncontextmenu = function () { return false; };\r\n        // 禁止文字选择\r\n        document.onselectstart = function () { return false; };\r\n        // 禁止复制\r\n        document.oncopy = function () { return false; };\r\n        // 禁止剪切\r\n        document.oncut = function () { return false; };\r\n        // 禁止粘贴\r\n        document.onpaste = function () { return false; };\r\n\r\n        this.getUserInfo()\r\n    }\r\n\r\n    // 获取用户简介\r\n    getUserInfo() {\r\n        testApi.userInfo().then(\r\n            res => {\r\n                this.setState({\r\n                    rateData: {\r\n                        recording_accuracy: res.data.recording_accuracy,\r\n                        accuracy: res.data.accuracy,\r\n                        speed: res.data.speed\r\n                    }\r\n                })\r\n\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    record = () => {\r\n        this.setState({ recordShow: true })\r\n        if (navigator.mediaDevices.getUserMedia) {\r\n            const constraints = { audio: true };\r\n            navigator.mediaDevices.getUserMedia(constraints).then(\r\n                stream => {\r\n                    // message.success(\"授权成功！\");\r\n                },\r\n                () => {\r\n                    message.error(\"授权失败！\");\r\n                }\r\n            );\r\n        } else {\r\n            message.error(\"浏览器不支持 getUserMedia\");\r\n\r\n        }\r\n    }\r\n\r\n    btn = () => {\r\n        this.setState({ btnLoading: true })   // recordShow: false,\r\n        setTimeout(() => {\r\n            // 上传录音\r\n            const { record_file } = this.state;\r\n            let fd = new FormData();\r\n            fd.append(\"audio\", record_file);\r\n            testApi.uploadFile(fd).then(res => {\r\n                if (res.code === 0) {\r\n                    testApi.recordRate(res.data.taskid).then(res=> {\r\n                        if (res.code === 0) {\r\n                            message.success('上传成功~')\r\n                            this.setState({ \r\n                                btnLoading: false,\r\n                                recordShow: false,\r\n                            })\r\n                            \r\n                        } else {\r\n                            this.setState({ btnLoading: false})\r\n                            message.error('识别失败~')\r\n                        }\r\n                    })\r\n                    \r\n                } else {\r\n                    this.setState({ btnLoading: false})\r\n                    message.error('上传失败~请稍后重试')\r\n                }\r\n            })\r\n\r\n        }, 100)\r\n    }\r\n\r\n    // 开始录音\r\n    start = () => {\r\n        const {recordState} = this.state;\r\n        if (recordState === 'recording') {\r\n            console.log('结束录音')\r\n            this.setState({ recordState: 'stop' })\r\n            recorder.stop();\r\n            console.log(recorder.duration);\r\n            let url = recorder.getWAVBlob();\r\n            let files = new window.File([url], 'demo.wav', { type: \"audio/wav\" })\r\n            this.setState({\r\n                record_file: files\r\n            })\r\n            \r\n        } else {\r\n            recorder.start().then(() => {\r\n                // 开始录音\r\n                this.setState({ recordState: 'recording' })\r\n                console.log('开始录音')\r\n            });\r\n        }\r\n        \r\n    }\r\n    // 播放录音\r\n    onPlay = () => {\r\n        recorder.play();\r\n    }\r\n\r\n    onCancel = () => {\r\n        this.setState({\r\n            recordShow: false,\r\n            record_file: null\r\n        })\r\n\r\n    }\r\n\r\n    \r\n\r\n\r\n    render() {\r\n        let recordStyle = {\r\n            display: 'flex',\r\n            width: '50%',\r\n            margin: '10px auto',\r\n            justifyContent: 'center',\r\n            alignItems: 'center'\r\n        }\r\n        let { recordState,  isStart, text_timer, btnLoading, rateData } = this.state;\r\n        let recordIcon = null,\r\n            recordTit = '点击开始录音',\r\n            recordType = false;\r\n        if (recordState === 'recording') {\r\n            recordIcon = <PauseOutlined />\r\n            recordTit = '点击结束录音'\r\n            recordType = true\r\n        } else {\r\n            recordIcon = <AudioOutlined />\r\n            recordType = false\r\n            recordTit = '点击开始录音'\r\n        }\r\n\r\n        const props = {\r\n            name: 'file',\r\n            beforeUpload: file => {\r\n                let fd = new FormData();\r\n                fd.append(\"audio\", file);\r\n                testApi.uploadFile(fd).then(res => {\r\n                    if (res.code === 0) {\r\n                        this.setState({ btnLoading: false })\r\n                    } else {\r\n                        this.setState({ btnLoading: false })\r\n                    }\r\n                })\r\n            },\r\n          };\r\n\r\n        return (\r\n\r\n            <div className='homeTest_bg'>\r\n                <Card title=\"打字录音测试\" className='test_card'>\r\n                    <strong className='test_tit'>下面为一段录音测试模板，点击开始进行录音测试</strong>\r\n                    <p className='test_con' style={{ userSelect: 'none' }}>\r\n                        {this.state.record_text}\r\n                    </p>\r\n                    <Button type='primary' onClick={this.record}>\r\n                        开始测试\r\n                    </Button>\r\n                    <span style={{display: rateData.recording_accuracy === '' ? 'none' : 'inline-block',marginLeft: '20px'}}>准确率：{rateData.recording_accuracy}</span>\r\n                    <strong className='test_tit test_mar'>下面为一段打字测试模板，点击开始进行打字测试</strong>\r\n                    <p className='test_con' style={{ userSelect: 'none' }}>\r\n                        {this.state.type_text}\r\n                    </p>\r\n                    <Button type='primary' onClick={this.text}>\r\n                        开始测试\r\n                    </Button>\r\n                    <span style={{display: rateData.accuracy === '' ? 'none' : 'inline-block',marginLeft: '20px'}}>准确率：{rateData.accuracy}&nbsp;&nbsp;&nbsp;&nbsp; 速度：{rateData.speed}</span>\r\n                </Card>\r\n\r\n                <Modal\r\n                    title=\"录音测试\"\r\n                    width='50%'\r\n                    visible={this.state.recordShow}\r\n                    onOk={this.btn}\r\n                    onCancel={this.onCancel}\r\n                    confirmLoading={btnLoading}\r\n                    okText=\"上传录音\"\r\n                    cancelText=\"取消\"\r\n                >\r\n                    <p>{this.state.record_text}</p>\r\n                    <Alert message=\"点击开始录音，请将上段文字完整流利读完，读完之后点击结束录音。结束后可以听取刚才的录音，若觉得不太满意可点击开始重新录音。最后点击上传录音。\" style={{ margin: '10px 0' }} type=\"warning\" />\r\n                    <div className='record_con' style={recordStyle}>\r\n                        <Tooltip title={recordTit}>\r\n                            <Button type='primary' danger={recordType} shape=\"circle\" size='large' icon={recordIcon} onClick={this.start} />\r\n                        </Tooltip>\r\n                        <Tooltip title='播放录音'>\r\n                            <Button style={{display: recordState === 'stop' ? 'inline-block' : 'none',marginLeft: '20px'}} type='primary' shape=\"circle\" size='large' icon={<CaretRightOutlined />} onClick={this.onPlay} />\r\n                        </Tooltip>\r\n                    </div>\r\n\r\n                </Modal>\r\n                <Modal\r\n                    title=\"打字测试\"\r\n                    width='50%'\r\n                    visible={this.state.textShow}\r\n                    onCancel={this.onTextCancel}\r\n                    okText=\"确定\"\r\n                    cancelText=\"取消\"\r\n                    footer={null}\r\n                >\r\n                    <p style={{ userSelect: 'none', lineHeight: '2' }}>{this.state.type_text}</p>\r\n                    <Alert message=\"点击开始请在下面文本域中输入上面这段文字，输入完毕点击结束按钮将停止计时并上传成绩\" style={{ margin: '10px 0' }} type=\"warning\" />\r\n                    <div className='record_con' style={{ margin: '20px 0', }}>\r\n                        <Form\r\n                            ref={this.clearRef}\r\n                        >   \r\n                            <Form.Item\r\n                                name='textStr'\r\n                            >\r\n                                <TextArea  rows={6} readOnly={isStart ? false : true} onInput={this.onTextArea} />\r\n                            </Form.Item>\r\n                            \r\n                        </Form>\r\n                    </div>\r\n                    <Button type=\"primary\" style={{ display: isStart ? 'none' : 'inline-block' }} onClick={this.onStart}>开始</Button>\r\n                    <Button type=\"primary\" style={{ display: isStart ? 'inline-block' : 'none' }} danger onClick={this.onEnd}>结束</Button>\r\n                    <span style={{ marginLeft: '20px' }}>用时：{text_timer}</span>\r\n                    <Button style={{float: 'right'}} type=\"primary\" danger onClick={this.onReset}>重新测试</Button>\r\n\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n    text = () => {\r\n        this.setState({\r\n            textShow: true\r\n        })\r\n    }\r\n\r\n    onTextCancel = () => {\r\n        this.setState({\r\n            textShow: false,\r\n            textStr: '',\r\n            isStart: false\r\n        })\r\n        clearInterval(this.state.timer)\r\n        window.location.reload()\r\n    }\r\n    onTextArea = (e) => {\r\n        this.setState({\r\n            textStr: e.target.value\r\n        })\r\n    }\r\n\r\n    clearRef = React.createRef();\r\n    // 重新测试\r\n    onReset = () => {\r\n        if (this.state.isStart) {\r\n            message.error('抱歉~您正在测试中，无法重新测试哦~')\r\n        } else {\r\n            this.setState({\r\n                textTimer: 1,\r\n                text_timer: '00:00'\r\n            })\r\n            clearInterval(this.state.timer)\r\n            // this.state.timer = setInterval(this.getTimer, 1000)\r\n            setTimeout(()=> {\r\n                this.clearRef.current.setFieldsValue({textStr: ''})\r\n            },100)\r\n            message.success('已重置，请开始')\r\n            \r\n        }\r\n        \r\n    }\r\n    // 开始\r\n    onStart = () => {\r\n        this.setState({\r\n            isStart: true\r\n        })\r\n        this.state.timer = setInterval(this.getTimer, 1000)\r\n    }\r\n    // 结束\r\n    onEnd = () => {\r\n        this.setState({\r\n            isStart: false\r\n        })\r\n        clearInterval(this.state.timer)\r\n        const { textStr, textTimer, type_text } = this.state;\r\n        \r\n        var right_rate, speed; // 初始定义正确率和速度\r\n        let str = type_text.split(''),    //  正确答案\r\n        str_user = textStr.split('');       // 用户输入的内容\r\n        speed = str_user.length/(textTimer-1)   // 打字速度=输入个数/用时\r\n\r\n        if (str_user.length < str.length ) {     // 如果用户输入的内容个数小于正确答案的个数 自动用空字符串补齐个数\r\n            let l = str.length-str_user.length;\r\n            for(let i=0;i<l;i++) {\r\n                str_user.push('')\r\n            }\r\n            let num = 0;    // 初始定义正确的个数  一一比对\r\n            for(let j=0;j<str.length;j++) {\r\n                if (str[j] === str_user[j]) {\r\n                    num++\r\n                }\r\n            }\r\n            right_rate = num/str.length   // 正确率=正确个数/总数\r\n            \r\n        } else {  // 如果字数相等或者大于正确答案的字数  直接比较\r\n            let num = 0;    // 初始定义正确的个数  一一比对\r\n            for(let j=0;j<str.length;j++) {\r\n                if (str[j] === str_user[j]) {\r\n                    num++\r\n                }\r\n            }\r\n            right_rate = num/str.length   // 正确率=正确个数/总数\r\n        }\r\n        \r\n        let d = {\r\n            str: right_rate,\r\n            time_spent: speed  \r\n        }\r\n\r\n        testApi.textSub(d).then(res => {\r\n            if (res.code === 0) {\r\n                message.success('成绩已上传，若还未输入完毕可继续点击开始测试~')\r\n            } else {\r\n                message.error(res.msg)\r\n            }\r\n        })\r\n    }\r\n    // 计时\r\n    getTimer = () => {\r\n        let minutes = Math.floor(this.state.textTimer / 60);\r\n        if (minutes < 10) {\r\n            minutes = '0' + minutes\r\n        }\r\n        let seconds = Math.floor(this.state.textTimer % 60);\r\n        if (seconds < 10) {\r\n            seconds = '0' + seconds\r\n        }\r\n        this.setState({\r\n            text_timer: minutes + \":\" + seconds\r\n        })\r\n        this.state.textTimer++;\r\n    }\r\n}\r\n\r\nexport default Test","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\changePassword\\ChangePassword.js",[],"C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\user\\UserLogout.js",["126"],"import React from 'react'\r\nimport { Card, Table, Spin, message, Pagination, Space, Modal } from 'antd';\r\nimport './user.less'\r\nimport userApi from './../../../services/home'\r\nimport homeApi from './../../../services/home';\r\n\r\nconst { confirm } = Modal;\r\nclass UserLogout extends React.Component {\r\n    state = {\r\n        userTab: [],\r\n        loading: false,\r\n        company: '',\r\n        pageIndex: 1,\r\n        pageSize: 10,\r\n        total: 0,\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.getUserData()\r\n    }\r\n\r\n    getUserData = () => {\r\n        this.setState({ loading: true })\r\n        const {pageIndex, pageSize, company} = this.state;\r\n        let d = {\r\n            pageIndex,\r\n            pageSize,\r\n            company,\r\n        }\r\n        userApi.logoutList(d).then(res => {\r\n            if (res.code === 0) {\r\n                this.setState({\r\n                    loading: false,\r\n                    userTab: res.data.entities,\r\n                    total: res.data.total\r\n                })\r\n            } else {\r\n                this.setState({ loading: false })\r\n                message.error(res.msg)\r\n            }\r\n        })\r\n    }\r\n\r\n    onChange = (page) => {\r\n        this.setState({\r\n            pageIndex: page,\r\n        });\r\n        setTimeout(() => {\r\n            this.getUserData()\r\n        },100)\r\n    }\r\n\r\n    onDelete = (record) => {\r\n        let that = this;\r\n        confirm({\r\n            title: '确定同意注销该员工账号么？',\r\n            okText: '同意',\r\n            okType: 'danger',\r\n            cancelText: '取消',\r\n            onOk() {\r\n                homeApi.agreeDel(record.id).then(res => {\r\n                    if (res.code === 0) {\r\n                        message.success('操作成功')\r\n                        that.getUserData()\r\n                    } else {\r\n                        message.error(res.msg)\r\n                    }\r\n                })\r\n            },\r\n          });\r\n        \r\n    }\r\n\r\n\r\n    render() {\r\n        const columns = [\r\n            {\r\n                title: '姓名',\r\n                dataIndex: 'name',\r\n                key: 'name',\r\n                fixed: 'left',\r\n                align: 'center'\r\n            },\r\n            {\r\n                title: '公司',\r\n                dataIndex: 'company',\r\n                key: 'company',\r\n                align: 'center'\r\n            },\r\n            {\r\n                title: '职场',\r\n                dataIndex: 'workplace',\r\n                key: 'workplace',\r\n                align: 'center'\r\n            },\r\n            {\r\n                title: '申请注销时间',\r\n                dataIndex: 'created_at',\r\n                key: 'created_at',\r\n                align: 'center'\r\n            },\r\n            {\r\n                title: '操作',\r\n                key: 'action',\r\n                fixed: 'right',\r\n                render: (text, record) => (\r\n                    <Space size=\"middle\">\r\n                        <a onClick={() => this.onDelete(record)}>审批</a>\r\n                    </Space>\r\n                ),\r\n            },\r\n        ];\r\n        const { loading, pageIndex, pageSize, total } = this.state;\r\n\r\n        return (\r\n            <div className='logout_bg'>\r\n                <Spin spinning={loading}>\r\n                    <Card title=\"注销公司员工列表\" className='logout_card'>\r\n                        <Table columns={columns} pagination={false} bordered dataSource={this.state.userTab} scroll={{ y: 550 }} />\r\n                        <Pagination\r\n                            style={{margin: '20px 0',float: 'right'}}\r\n                            current={pageIndex}\r\n                            pageSize={pageSize}\r\n                            total={total}\r\n                            showTotal={total => `共 ${total} 条`}\r\n                            onChange={this.onChange}\r\n                        />\r\n                    </Card>\r\n                </Spin>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserLogout","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\user\\UserApply.js",["127","128"],"import React from 'react'\r\nimport { Card, Table, Space, Spin, message, Modal,  Descriptions, Pagination} from 'antd';\r\nimport './user.less'\r\nimport userApi from './../../../services/home'\r\n\r\nclass UserApply extends React.Component {\r\n    state = {\r\n        userTab: [],\r\n        loading: false,\r\n        company: '',\r\n        pageIndex: 1,\r\n        pageSize: 10,\r\n        total: 0,\r\n        isShow: false,\r\n        userInfo: {},\r\n        isLoad: false,\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.getUserData()\r\n    }\r\n\r\n    showModal = (data) => {\r\n        this.setState({\r\n            isShow: true,\r\n            isLoad: true,\r\n        });\r\n        userApi.applyDetail(data.id).then(res => {\r\n            if (res.code === 0) {\r\n                this.setState({\r\n                    isLoad: false,\r\n                    userInfo: res.data\r\n                })\r\n            } else {\r\n                message.error('哎呀~查询失败了，请稍后再试哦')\r\n            }\r\n        })\r\n    };\r\n\r\n    hideModal = () => {\r\n        this.setState({\r\n            isShow: false,\r\n        });\r\n    };\r\n\r\n    getUserData = () => {\r\n        this.setState({ loading: true })\r\n        const {pageIndex, pageSize, company} = this.state;\r\n        let d = {\r\n            pageIndex,\r\n            pageSize,\r\n            company,\r\n        }\r\n        userApi.applyList(d).then(res => {\r\n            if (res.code === 0) {\r\n                this.setState({\r\n                    loading: false,\r\n                    userTab: res.data.entities,\r\n                    total: res.data.total\r\n                })\r\n            } else {\r\n                this.setState({ loading: false })\r\n                message.error(res.msg)\r\n            }\r\n        })\r\n    }\r\n\r\n    onChange = (page) => {\r\n        this.setState({\r\n            pageIndex: page,\r\n        });\r\n        setTimeout(() => {\r\n            this.getUserData()\r\n        },100)\r\n    }\r\n\r\n    // 审核\r\n    examine = (record) => {\r\n        Modal.confirm({\r\n            title: '申请审核',\r\n            content: '是否同意该员工的申请？',\r\n            okText: '确认',\r\n            cancelText: '取消',\r\n            onOk: () => {\r\n                userApi.applyExamine(record.id).then(res => {\r\n                    if (res.code === 0) {\r\n                        message.success('设置成功')\r\n                        this.getUserData()\r\n                    } else {\r\n                        message.error(res.msg)\r\n                    }\r\n                })\r\n            },\r\n\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        const columns = [\r\n            {\r\n                title: '姓名',\r\n                dataIndex: 'name',\r\n                key: 'name',\r\n                fixed: 'left',\r\n                width: 100,\r\n                align: 'center'\r\n            },\r\n            {\r\n                title: '手机号',\r\n                dataIndex: 'mobile',\r\n                key: 'mobile',\r\n                width: 120,\r\n                align: 'center'\r\n            },\r\n\r\n            {\r\n                title: '申请公司',\r\n                dataIndex: 'company',\r\n                key: 'company',\r\n                width: 200,\r\n                align: 'center'\r\n            },\r\n            {\r\n                title: '申请职场',\r\n                dataIndex: 'workplace',\r\n                key: 'workplace',\r\n                align: 'center'\r\n            },\r\n            {\r\n                title: '申请时间',\r\n                dataIndex: 'created_at',\r\n                key: 'created_at',\r\n                align: 'center'\r\n            },\r\n            {\r\n                title: '操作',\r\n                key: 'action',\r\n                fixed: 'right',\r\n                render: (text, record) => (\r\n                    <Space size=\"middle\">\r\n                        <a onClick={() => this.showModal(record)}>查看资料</a>\r\n                        <a onClick={() => this.examine(record)}>审核</a>\r\n                    </Space>\r\n                ),\r\n            },\r\n        ];\r\n        const { loading, isLoad, userInfo, pageIndex, pageSize, total, userTab} = this.state;\r\n        \r\n\r\n        return (\r\n            <div className='apply_bg'>\r\n                <Spin spinning={loading}>\r\n                    <Card title=\"申请绑定公司员工列表\" className='apply_card'>\r\n                        <Table columns={columns} pagination={false} bordered dataSource={userTab} scroll={{ y: 550 }} />\r\n                        <Pagination\r\n                            style={{margin: '20px 0',float: 'right'}}\r\n                            current={pageIndex}\r\n                            pageSize={pageSize}\r\n                            total={total}\r\n                            showTotal={total => `共 ${total} 条`}\r\n                            onChange={this.onChange}\r\n                        />\r\n                    </Card>\r\n                </Spin>\r\n                <Modal\r\n                    title=\"员工信息\"\r\n                    width='60%'\r\n                    visible={this.state.isShow}\r\n                    onCancel={this.hideModal}\r\n                    okText=\"确认\"\r\n                    cancelText=\"取消\"\r\n                >\r\n                    <Spin spinning={isLoad}>\r\n                        <Descriptions title={userInfo.name} layout=\"vertical\" bordered>\r\n                            <Descriptions.Item label='手机号'>\r\n                                <span style={{ color: userInfo.mobile ? '#1790ff' : '#ccc' }}>{userInfo.mobile ? userInfo.mobile : '暂无'}</span>\r\n                            </Descriptions.Item>\r\n                            <Descriptions.Item label='身份'>\r\n                                <span style={{ color: userInfo.identity ? '#1790ff' : '#ccc' }}> {userInfo.identity ? userInfo.identity : '暂无'}</span>\r\n                            </Descriptions.Item>\r\n                            <Descriptions.Item label='邮箱'>\r\n                                <span style={{ color: userInfo.email ? '#1790ff' : '#ccc' }} > {userInfo.email ? userInfo.email : '暂无'}</span>\r\n                            </Descriptions.Item>\r\n                            <Descriptions.Item label='邮寄地址'>\r\n                                <span style={{ color: userInfo.address ? '#1790ff' : '#ccc' }}> {userInfo.address ? userInfo.identity : '暂无'}</span>\r\n                            </Descriptions.Item>\r\n                            <Descriptions.Item label='是否从事过话务'>\r\n                                <span style={{ color: userInfo.is_traffic ? '#1790ff' : '#ccc' }}> {userInfo.is_traffic ? userInfo.is_traffic : '暂无'}</span>\r\n                            </Descriptions.Item>\r\n                            <Descriptions.Item label='期望周工作时间'>\r\n                                <span style={{ color: userInfo.week_work ? '#1790ff' : '#ccc' }} >{userInfo.week_work ? userInfo.week_work : '暂无'}</span>\r\n                            </Descriptions.Item>\r\n                            <Descriptions.Item label='毕业院校'>\r\n                                <span style={{ color: userInfo.school ? '#1790ff' : '#ccc' }}>{userInfo.school ? userInfo.school : '暂无'}</span>\r\n                            </Descriptions.Item>\r\n                            <Descriptions.Item label='起止时间'>\r\n                                <span style={{color: '#1790ff'}}> {userInfo.ed_start_time} ~ {userInfo.ed_start_time}</span>\r\n                            </Descriptions.Item>\r\n                            <Descriptions.Item label='专业'>\r\n                                <span style={{ color: userInfo.major ? '#1790ff' : '#ccc' }}>{userInfo.major ? userInfo.major : '暂无'}</span>\r\n                            </Descriptions.Item>\r\n                            <Descriptions.Item label='学历'>\r\n                                <span style={{ color: userInfo.education ? '#1790ff' : '#ccc' }}>{userInfo.education ? userInfo.education : '暂无'}</span>\r\n                            </Descriptions.Item>\r\n                            <Descriptions.Item label='学位'>\r\n                                <span style={{ color: userInfo.academic_degree ? '#1790ff' : '#ccc' }}>{userInfo.academic_degree ? userInfo.academic_degree : '暂无'}</span>\r\n                            </Descriptions.Item>\r\n                            <Descriptions.Item label='工作单位'>\r\n                                <span style={{ color: userInfo.work ? '#1790ff' : '#ccc' }} >{userInfo.work ? userInfo.work : '暂无'}</span>\r\n                            </Descriptions.Item>\r\n                            <Descriptions.Item label='起止时间'>\r\n                                <span style={{color: '#1790ff'}}>{userInfo.wo_start_time} ~ {userInfo.wo_end_time}</span>\r\n                            </Descriptions.Item>\r\n                            <Descriptions.Item label='职务'>\r\n                                <span style={{ color: userInfo.post ? '#1790ff' : '#ccc' }}>{userInfo.post ? userInfo.post : '暂无'}</span>\r\n                            </Descriptions.Item>\r\n                            <Descriptions.Item label='工作描述'>\r\n                                <span style={{ color: userInfo.describe ? '#1790ff' : '#ccc' }}>{userInfo.describe ? userInfo.describe : '暂无'}</span>\r\n                            </Descriptions.Item>\r\n                        </Descriptions>\r\n                    </Spin>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserApply","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\user\\UserRegister.js",["129"],"import React from 'react'\r\nimport { Card, Table, Space, Spin, message, Pagination } from 'antd';\r\nimport './user.less'\r\nimport userApi from './../../../services/home'\r\n\r\n\r\nclass UserRegister extends React.Component {\r\n    state = {\r\n        userTab: [],\r\n        loading: false,\r\n        company: '',\r\n        pageIndex: 1,\r\n        pageSize: 10,\r\n        total: 0,\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.getUserData()\r\n    }\r\n\r\n    getUserData = () => {\r\n        this.setState({loading: true})\r\n        const {pageIndex, pageSize, company} = this.state;\r\n        let d = {\r\n            pageIndex,\r\n            pageSize,\r\n            company,\r\n        }\r\n        userApi.staffList(d).then(res => {\r\n            if (res.code === 0) {\r\n                this.setState({ \r\n                    loading: false,\r\n                    userTab: res.data.entities, \r\n                    total: res.data.total\r\n                })\r\n            } else {\r\n                this.setState({loading: false})\r\n                message.error(res.msg)\r\n            }\r\n        })\r\n    }\r\n    \r\n    onChange = (page) => {\r\n        this.setState({\r\n            pageIndex: page,\r\n        });\r\n        setTimeout(() => {\r\n            this.getUserData()\r\n        },100)\r\n    }\r\n\r\n\r\n    render() {\r\n        const columns = [\r\n            {\r\n                title: '姓名',\r\n                dataIndex: 'name',\r\n                key: 'name',\r\n                fixed: 'left',\r\n                width: 100,\r\n                align: 'center',\r\n            },\r\n            {\r\n                title: '手机号',\r\n                dataIndex: 'mobile',\r\n                key: 'mobile',\r\n                width: 120,\r\n                align: 'center'\r\n            },\r\n            {\r\n                title: '身份',\r\n                dataIndex: 'identity',\r\n                key: 'identity',\r\n                align: 'center'\r\n            },\r\n            {\r\n                title: '邮箱',\r\n                dataIndex: 'email',\r\n                key: 'email',\r\n                width: 200,\r\n                align: 'center'\r\n            },\r\n            {\r\n                title: '邮寄地址',\r\n                dataIndex: 'address',\r\n                key: 'address',\r\n                width: 300,\r\n                align: 'center'\r\n            },\r\n            {\r\n                title: '是否从事过话务',\r\n                dataIndex: 'is_traffic',\r\n                key: 'is_traffic',\r\n                align: 'center'\r\n            },\r\n            {\r\n                title: '期望周工作时间',\r\n                dataIndex: 'week_work',\r\n                key: 'week_work',\r\n                align: 'center'\r\n            },\r\n            {\r\n                title: '最高学历',\r\n                children: [\r\n\r\n                    {\r\n                        title: '毕业院校',\r\n                        dataIndex: 'school',\r\n                        key: 'school',\r\n                        width: 200,\r\n                        align: 'center'\r\n                    },\r\n                    {\r\n                        title: '起止时间',\r\n                        dataIndex: 'ed_start_time',\r\n                        key: 'ed_start_time',\r\n                        align: 'center',\r\n                        width: 300,\r\n                        render: (text,record) => {\r\n                            const {ed_start_time, ed_end_time} = record;\r\n                            return (\r\n                                <span>\r\n                                    {ed_start_time} ~ {ed_end_time}\r\n                                </span>\r\n                            )\r\n                        }\r\n                    },\r\n                    {\r\n                        title: '专业',\r\n                        dataIndex: 'major',\r\n                        key: 'major',\r\n                        align: 'center'\r\n                    },\r\n                    {\r\n                        title: '学历',\r\n                        dataIndex: 'education',\r\n                        key: 'education',\r\n                        align: 'center'\r\n                    },\r\n                    {\r\n                        title: '学位',\r\n                        dataIndex: 'academic_degree',\r\n                        key: 'academic_degree',\r\n                        align: 'center'\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                title: '最近工作',\r\n                children: [\r\n                    {\r\n                        title: '工作单位',\r\n                        dataIndex: 'work',\r\n                        key: 'work',\r\n                        width: 200,\r\n                        align: 'center'\r\n                    },\r\n                    {\r\n                        title: '起止时间',\r\n                        dataIndex: 'wo_start_time',\r\n                        key: 'wo_start_time',\r\n                        align: 'center',\r\n                        width: 300,\r\n                        render: (text,record) => {\r\n                            const {wo_start_time, wo_end_time} = record;\r\n                            return (\r\n                                <span>\r\n                                    {wo_start_time} ~ {wo_end_time}\r\n                                </span>\r\n                            )\r\n                        }\r\n                    },\r\n                    {\r\n                        title: '职务',\r\n                        dataIndex: 'post',\r\n                        key: 'post',\r\n                        align: 'center'\r\n                    },\r\n                    {\r\n                        title: '工作描述',\r\n                        dataIndex: 'describe',\r\n                        key: 'describe',\r\n                        width: 200,\r\n                        align: 'center',\r\n                        ellipsis: true,\r\n                    },\r\n                ]\r\n            },\r\n\r\n            {\r\n                title: '公司',\r\n                dataIndex: 'company',\r\n                key: 'company',\r\n                align: 'center',\r\n                fixed: 'right',\r\n            },\r\n            {\r\n                title: '职场',\r\n                dataIndex: 'workplace',\r\n                key: 'workplace',\r\n                align: 'center',\r\n                fixed: 'right',\r\n            },\r\n            // {\r\n            //   title: '操作',\r\n            //   key: 'action',\r\n            //   fixed: 'right',\r\n            //   render: (text, record) => (\r\n            //     <Space size=\"middle\">\r\n            //       <a>Delete</a>\r\n            //     </Space>\r\n            //   ),\r\n            // },\r\n        ];\r\n        const {loading, pageIndex, pageSize, total} = this.state;\r\n\r\n        return (\r\n            <div className='register_bg'>\r\n                <Spin spinning={loading}>\r\n                    <Card title=\"在职员工管理\" className='register_card'>\r\n                        <Table columns={columns} pagination={false} bordered dataSource={this.state.userTab} scroll={{ x: 3000, y: 550 }} />\r\n                        <Pagination\r\n                            style={{margin: '20px 0',float: 'right'}}\r\n                            current={pageIndex}\r\n                            pageSize={pageSize}\r\n                            total={total}\r\n                            showTotal={total => `共 ${total} 条`}\r\n                            onChange={this.onChange}\r\n                        />\r\n                    </Card>\r\n                </Spin>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserRegister","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\user\\UserSche.js",["130","131"],"import React from 'react'\r\nimport { Card, message, Table, Spin, Space, Modal, Transfer, } from 'antd';\r\nimport './user.less'\r\nimport userApi from './../../../services/home'\r\n\r\nclass UserSche extends React.Component {\r\n    state = {\r\n        schTab: [],\r\n        loading: false,\r\n        schUser: [],\r\n        isShow: false,\r\n        targetKeys: [],\r\n        modLoad: false,\r\n        saveForm: {\r\n            worktime: '',\r\n            uidstr: '',\r\n        }\r\n\r\n    }\r\n    componentWillMount() {\r\n        this.getSchList()\r\n        this.getSchUser()\r\n\r\n    }\r\n\r\n    // 获取该公司该周的排班列表\r\n    getSchList = () => {\r\n        this.setState({ loading: true })\r\n        userApi.schList().then(res => {\r\n            if (res.code === 0) {\r\n                this.setState({\r\n                    schTab: res.data,\r\n                    loading: false\r\n                })\r\n            } else {\r\n                this.setState({ loading: false })\r\n                message.error(res.msg)\r\n            }\r\n        })\r\n    }\r\n\r\n    // 获取该公司旗下的员工\r\n    getSchUser = () => {\r\n        let d = {\r\n            pageIndex: 1,\r\n            pageSize: 1000,\r\n        }\r\n        userApi.staffList(d).then(res => {\r\n            if (res.code === 0) {\r\n                let d = res.data.entities;\r\n                const mockData = [];\r\n                for (let i = 0; i < d.length; i++) {\r\n                    const data = {\r\n                      key: d[i].uid,\r\n                      title: d[i].name,\r\n                      description: `description of content${i + 1}`,\r\n                    };\r\n                    mockData.push(data);\r\n                }\r\n                this.setState({ schUser: mockData });\r\n            }\r\n        })\r\n    }\r\n\r\n    onSch = (record) => {\r\n        this.state.saveForm.worktime = record.curDate\r\n        this.setState({\r\n            modLoad: true,\r\n            isShow: true,\r\n        })\r\n        userApi.schDetail(record.curDate).then(res => {\r\n            if (res.code === 0) {\r\n                let d = res.data;\r\n                const targetKeys = [];\r\n                for (let i = 0; i < d.length; i++) {\r\n                    // console.log(d[i])\r\n                    const data = {\r\n                      key: d[i].uid,\r\n                      title: d[i].userData.username,\r\n                      description: `description of content${i + 1}`,\r\n                    };\r\n                    // console.log(data)\r\n                    targetKeys.push(data.key);\r\n                }\r\n                this.setState({ \r\n                    targetKeys,\r\n                    modLoad: false\r\n                 });\r\n            } else {\r\n                message.error('信息获取失败')\r\n                this.setState({modLoad: false})\r\n            }\r\n        })\r\n    }\r\n\r\n    filterOption = (inputValue, option) => option.description.indexOf(inputValue) > -1;\r\n\r\n    handleChange = targetKeys => {\r\n        // console.log(targetKeys)\r\n        this.setState({ targetKeys });\r\n    };\r\n\r\n    handleSearch = (dir, value) => {\r\n        // console.log('search:', dir, value);\r\n    };\r\n\r\n    render() {\r\n        const columns = [\r\n            {\r\n                title: '日期',\r\n                dataIndex: 'week',\r\n                key: 'week',\r\n                align: 'center'\r\n            },\r\n            {\r\n                title: '人数',\r\n                dataIndex: 'count',\r\n                key: 'count',\r\n                align: 'center'\r\n            },\r\n            {\r\n                title: '操作',\r\n                key: 'action',\r\n                fixed: 'right',\r\n                render: (text, record) => (\r\n                    <Space size=\"middle\">\r\n                        <a onClick={() => this.onSch(record)}>排班</a>\r\n                    </Space>\r\n                ),\r\n            },\r\n        ];\r\n        const { loading, schTab, isShow, modLoad } = this.state;\r\n\r\n        return (\r\n            <div className='sche_bg'>\r\n                <Spin spinning={loading}>\r\n                    <Card title=\"排班管理\" className='sche_card'>\r\n                        <Table columns={columns} pagination={false} bordered dataSource={schTab} />\r\n                    </Card>\r\n                </Spin>\r\n                <Modal title=\"排班\" visible={isShow} onOk={this.handleOk} onCancel={this.handleCancel}>\r\n                    <Spin spinning={modLoad}>\r\n                    <Transfer\r\n                        titles={['未选', '已选']}\r\n                        dataSource={this.state.schUser}\r\n                        filterOption={this.filterOption}\r\n                        targetKeys={this.state.targetKeys}\r\n                        onChange={this.handleChange}\r\n                        onSearch={this.handleSearch}\r\n                        render={item => item.title}\r\n                    />\r\n                    </Spin>\r\n                </Modal>\r\n\r\n            </div>\r\n        )\r\n\r\n    }\r\n    handleOk = () => {\r\n        this.setState({modLoad: true})\r\n        let { saveForm, targetKeys } = this.state;\r\n        saveForm.uidstr = targetKeys.join(',')\r\n        userApi.schSave(saveForm).then(res => {\r\n            if (res.code === 0) {\r\n                message.success('操作成功~')\r\n                this.setState({\r\n                    isShow: false,\r\n                    modLoad: false,\r\n                    saveForm: {\r\n                        worktime: '',\r\n                        uidstr: '',\r\n                    }\r\n                })\r\n                this.getSchList()\r\n            } else {\r\n                message.error(res.msg)\r\n                this.setState({modLoad: false})\r\n            }\r\n        })\r\n    }\r\n\r\n    handleCancel = () => {\r\n        this.setState({\r\n            isShow: false,\r\n            saveForm: {\r\n                worktime: '',\r\n                uidstr: '',\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default UserSche","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\train\\Train.js",[],"C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\outbound\\Outbound.js",[],"C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\company\\Company.js",["132","133","134","135","136"],"import React from 'react'\r\nimport { Card, Table, Space, Spin, message, Pagination, Form, Input, Modal, Button } from 'antd';\r\nimport comApi from './../../../services/home'\r\n\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        sm: { span: 6 },\r\n    },\r\n};\r\nconst { confirm } = Modal;\r\nclass Company extends React.Component {\r\n    state = {\r\n        companyTab: [],\r\n        loading: false,\r\n        page: 1,\r\n        limit: 10,\r\n        total: 0,\r\n        name: '',\r\n        isShow: false,\r\n        comName: '',\r\n        modalLoad: false,\r\n        isAddShow:false,\r\n        addForm: {\r\n            name: '',\r\n            account: '',\r\n            password: ''\r\n        }\r\n\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.getCompanyData()\r\n    }\r\n\r\n    getCompanyData = () => {\r\n        this.setState({ loading: true })\r\n        const { page, limit, name } = this.state;\r\n        let d = {\r\n            page,\r\n            limit,\r\n            name,\r\n        }\r\n        comApi.companyList(d).then(res => {\r\n            if (res.code === 0) {\r\n                this.setState({\r\n                    loading: false,\r\n                    companyTab: res.data.list,\r\n                    total: res.data.count\r\n                })\r\n            } else {\r\n                this.setState({ loading: false })\r\n                message.error(res.msg)\r\n            }\r\n        })\r\n    }\r\n\r\n    onChange = (page) => {\r\n        this.setState({\r\n            page: page,\r\n        });\r\n        setTimeout(() => {\r\n            this.getCompanyData()\r\n        },100)\r\n    }\r\n\r\n    formRef = React.createRef()\r\n\r\n    // 修改\r\n    onModify = (record) => {\r\n        this.setState({\r\n            isShow: true,\r\n            modalLoad: true,\r\n            cid: record.id,\r\n            comName: record.name\r\n\r\n        })\r\n        comApi.companyDetail(record.id).then(res => {\r\n            if (res.code === 0) {\r\n                this.formRef.current.setFieldsValue(res.data)\r\n                setTimeout(() => {\r\n                    this.setState({ modalLoad: false })\r\n                }, 500);\r\n            } else {\r\n                message.error(res.msg)\r\n            }\r\n        })\r\n\r\n    }\r\n    onBtn = () => {\r\n        let { cid, comName } = this.state;\r\n        let d = {\r\n            id: cid,\r\n            name: comName\r\n        }\r\n        comApi.companyModify(d).then(res => {\r\n            if (res.code === 0) {\r\n                message.success('修改成功')\r\n                this.setState({ cid: '', comName: '', isShow: false })\r\n                this.getCompanyData()\r\n            } else {\r\n                message.error(res.msg)\r\n            }\r\n        })\r\n    }\r\n\r\n    // 删除\r\n    onDel = (record) => {\r\n        let that = this;\r\n        confirm({\r\n            title: '确定删除该公司账号信息么？',\r\n            okText: '确定',\r\n            okType: 'danger',\r\n            cancelText: '取消',\r\n            onOk() {\r\n                comApi.companyRemove(record.id).then(res => {\r\n                    if (res.code === 0) {\r\n                        message.success('删除成功')\r\n                        that.getCompanyData()\r\n                    } else {\r\n                        message.error(res.msg)\r\n                    }\r\n                })\r\n            },\r\n          });\r\n    }\r\n\r\n    addFormRef = React.createRef()\r\n\r\n    // 添加\r\n    onAddShow = () => {\r\n        let {addForm} = this.state;\r\n        this.setState({\r\n            isAddShow: true\r\n        })\r\n        setTimeout(() => {\r\n            this.addFormRef.current.setFieldsValue(addForm)\r\n        },100)\r\n        \r\n    }\r\n    onAddBtn = () => {\r\n        let {addForm} = this.state;\r\n        comApi.companyCreate(addForm).then(res => {\r\n            if (res.code === 0) {\r\n                message.success('添加成功')\r\n                this.setState({\r\n                    isAddShow: false,\r\n                    addForm: {\r\n                        name: '',\r\n                        account: '',\r\n                        password: ''\r\n                    }\r\n                })\r\n                this.getCompanyData()\r\n            } else {\r\n                message.error(res.msg)\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    onAddHide = () => {\r\n        this.setState({\r\n            isAddShow: false,\r\n            addForm: {\r\n                name: '',\r\n                account: '',\r\n                password: '',\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const columns = [\r\n            {\r\n                title: '公司名称',\r\n                dataIndex: 'name',\r\n                key: 'name',\r\n                fixed: 'left',\r\n                align: 'center'\r\n            },\r\n            {\r\n                title: '创建时间',\r\n                dataIndex: 'created_at',\r\n                key: 'created_at',\r\n                align: 'center'\r\n            },\r\n            {\r\n                title: '操作',\r\n                key: 'action',\r\n                fixed: 'right',\r\n                render: (text, record) => (\r\n                    <Space size=\"middle\">\r\n                        <a onClick={() => this.onModify(record)}>修改</a>\r\n                        <a onClick={() => this.onDel(record)}>删除</a>\r\n                    </Space>\r\n                ),\r\n            },\r\n        ];\r\n        const { loading, isShow, modalLoad, isAddShow, page, limit, total, companyTab, } = this.state;\r\n        return (\r\n            <div>\r\n                <Spin spinning={loading}>\r\n                    <Card title=\"公司管理\" className='company_card'>\r\n                        <Button type='primary' style={{display: 'block',marginBottom: '20px'}} onClick={this.onAddShow}>\r\n                                添加公司\r\n                        </Button>\r\n                        <Table columns={columns} pagination={false} bordered dataSource={companyTab} scroll={{ y: 550 }} />\r\n                        <Pagination\r\n                            style={{ margin: '20px 0', float: 'right' }}\r\n                            current={page}\r\n                            pageSize={limit}\r\n                            total={total}\r\n                            showTotal={total => `共 ${total} 条`}\r\n                            onChange={this.onChange}\r\n                        />\r\n                    </Card>\r\n                </Spin>\r\n\r\n                <Modal title=\"添加\" visible={isAddShow} onOk={this.onAddBtn} onCancel={this.onAddHide}>\r\n                    <Spin spinning={modalLoad}>\r\n                        <Form ref={this.addFormRef} {...formItemLayout}>\r\n                            <Form.Item\r\n                                label=\"公司名称\"\r\n                                name='name'\r\n                            >\r\n                                <Input placeholder=\"请输入公司名称\" autoComplete='off' onChange={this.bindAddName} />\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                                label=\"账号\"\r\n                                name='account'\r\n                            >\r\n                                <Input placeholder=\"请输入账号\" autoComplete='off' onChange={this.bindAddAccount} />\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                                label=\"密码\"\r\n                                name='password'\r\n                            >\r\n                                <Input placeholder=\"请输入密码\" autoComplete='off' onChange={this.bindAddPass} />\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Spin>\r\n                </Modal>\r\n\r\n                <Modal title=\"修改\" visible={isShow} onOk={this.onBtn} onCancel={this.onHide}>\r\n                    <Spin spinning={modalLoad}>\r\n                        <Form ref={this.formRef}>\r\n                            <Form.Item\r\n                                label=\"公司名称\"\r\n                                name='name'\r\n                            >\r\n                                <Input placeholder=\"请输入公司名称\" autoComplete='off' onChange={this.bindName} />\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Spin>\r\n                </Modal>\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    onHide = () => {\r\n        this.setState({\r\n            isShow: false\r\n        })\r\n    }\r\n\r\n    bindName = (e) => {\r\n        this.setState({\r\n            comName: e.target.value\r\n        })\r\n    }\r\n\r\n    bindAddName = (e) => {\r\n        this.state.addForm.name = e.target.value\r\n    }\r\n    bindAddAccount = (e) => {\r\n        this.state.addForm.account = e.target.value\r\n    }\r\n    bindAddPass = (e) => {\r\n        this.state.addForm.password = e.target.value\r\n    }\r\n}\r\n\r\nexport default Company","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\company\\Workplace.js",["137","138","139"],"import React from 'react'\r\nimport { Card, Table, Space, Spin, message, Pagination, Form, Input, Modal, Button } from 'antd';\r\nimport comApi from './../../../services/home'\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        sm: { span: 6 },\r\n    },\r\n};\r\nconst { confirm } = Modal;\r\nclass Workplace extends React.Component {\r\n    state = {\r\n        workplaceTab: [],\r\n        total: 0,\r\n        page: 1,\r\n        limit: 10,\r\n        workName: '',\r\n        isAddShow: false,\r\n        addForm: {\r\n            name: '',\r\n        },\r\n        modalLoad: false\r\n\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.getWorkplaceData()\r\n    }\r\n\r\n    getWorkplaceData = () => {\r\n        this.setState({ loading: true })\r\n        const { page, limit } = this.state;\r\n        let d = {\r\n            page,\r\n            limit,\r\n        }\r\n        comApi.workList(d).then(res => {\r\n            if (res.code === 0) {\r\n                this.setState({\r\n                    loading: false,\r\n                    workplaceTab: res.data.list,\r\n                    total: res.data.count\r\n                })\r\n            } else {\r\n                this.setState({ loading: false })\r\n                message.error(res.msg)\r\n            }\r\n        })\r\n    }\r\n\r\n    onChange = (page) => {\r\n        this.setState({\r\n            page: page,\r\n        });\r\n        setTimeout(() => {\r\n            this.getWorkplaceData()\r\n        },100)\r\n    }\r\n\r\n    formRef = React.createRef()\r\n\r\n    // 修改\r\n    onModify = (record) => {\r\n        this.setState({\r\n            isShow: true,\r\n            modalLoad: true,\r\n            cid: record.id,\r\n            workName: record.name\r\n\r\n        })\r\n        comApi.workDetail(record.id).then(res => {\r\n            if (res.code === 0) {\r\n                this.formRef.current.setFieldsValue(res.data)\r\n                setTimeout(() => {\r\n                    this.setState({ modalLoad: false })\r\n                }, 500);\r\n            } else {\r\n                message.error(res.msg)\r\n            }\r\n        })\r\n\r\n    }\r\n    onBtn = () => {\r\n        let { cid, workName } = this.state;\r\n        let d = {\r\n            id: cid,\r\n            name: workName\r\n        }\r\n        comApi.workModify(d).then(res => {\r\n            if (res.code === 0) {\r\n                message.success('修改成功')\r\n                this.setState({ cid: '', workName: '', isShow: false })\r\n                this.getWorkplaceData()\r\n            } else {\r\n                message.error(res.msg)\r\n            }\r\n        })\r\n    }\r\n\r\n    // 删除\r\n    onDel = (record) => {\r\n        let that = this;\r\n        confirm({\r\n            title: '确定删除该职场信息么？',\r\n            okText: '确定',\r\n            okType: 'danger',\r\n            cancelText: '取消',\r\n            onOk() {\r\n                comApi.workRemove(record.id).then(res => {\r\n                    if (res.code === 0) {\r\n                        message.success('删除成功')\r\n                        that.getWorkplaceData()\r\n                    } else {\r\n                        message.error(res.msg)\r\n                    }\r\n                })\r\n            },\r\n          });\r\n    }\r\n\r\n\r\n    addFormRef = React.createRef()\r\n\r\n    // 添加\r\n    onAddShow = () => {\r\n        let {addForm} = this.state;\r\n        this.setState({\r\n            isAddShow: true\r\n        })\r\n        setTimeout(() => {\r\n            this.addFormRef.current.setFieldsValue(addForm)\r\n        },100)\r\n        \r\n    }\r\n    onAddBtn = () => {\r\n        let {addForm} = this.state;\r\n        comApi.workCreate(addForm).then(res => {\r\n            if (res.code === 0) {\r\n                message.success('添加成功')\r\n                this.setState({\r\n                    isAddShow: false,\r\n                    addForm: {\r\n                        name: '',\r\n                    }\r\n                })\r\n                this.getWorkplaceData()\r\n            } else {\r\n                message.error(res.msg)\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    onAddHide = () => {\r\n        this.setState({\r\n            isAddShow: false,\r\n            addForm: {\r\n                name: '',\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const columns = [\r\n            {\r\n                title: '公司名称',\r\n                dataIndex: 'name',\r\n                key: 'name',\r\n                fixed: 'left',\r\n                align: 'center'\r\n            },\r\n            {\r\n                title: '创建时间',\r\n                dataIndex: 'created_at',\r\n                key: 'created_at',\r\n                align: 'center'\r\n            },\r\n            {\r\n                title: '操作',\r\n                key: 'action',\r\n                fixed: 'right',\r\n                render: (text, record) => (\r\n                    <Space size=\"middle\">\r\n                        <a onClick={() => this.onModify(record)}>修改</a>\r\n                        <a onClick={() => this.onDel(record)}>删除</a>\r\n                    </Space>\r\n                ),\r\n            },\r\n        ];\r\n        const { loading, isShow, modalLoad, isAddShow, page, limit, total, workplaceTab, } = this.state;\r\n        return(\r\n            <div>\r\n                <Spin spinning={loading}>\r\n                    <Card title=\"职场管理\" className='Workplace_card'>\r\n                    <Button type='primary' style={{display: 'block',marginBottom: '20px'}} onClick={this.onAddShow}>\r\n                                    添加职场\r\n                            </Button>\r\n                            <Table columns={columns} pagination={false} bordered dataSource={workplaceTab} scroll={{ y: 550 }} />\r\n                            <Pagination\r\n                                style={{ margin: '20px 0', float: 'right' }}\r\n                                current={page}\r\n                                pageSize={limit}\r\n                                total={total}\r\n                                showTotal={total => `共 ${total} 条`}\r\n                                onChange={this.onChange}\r\n                            />\r\n                    </Card>\r\n                </Spin>\r\n\r\n                <Modal title=\"添加\" visible={isAddShow} onOk={this.onAddBtn} onCancel={this.onAddHide}>\r\n                    <Spin spinning={modalLoad}>\r\n                        <Form ref={this.addFormRef} {...formItemLayout}>\r\n                            <Form.Item\r\n                                label=\"职场名称\"\r\n                                name='name'\r\n                            >\r\n                                <Input placeholder=\"请输入职场名称\" autoComplete='off' onChange={this.bindAddName} />\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Spin>\r\n                </Modal>\r\n\r\n                <Modal title=\"修改\" visible={isShow} onOk={this.onBtn} onCancel={this.onHide}>\r\n                    <Spin spinning={modalLoad}>\r\n                        <Form ref={this.formRef}>\r\n                            <Form.Item\r\n                                label=\"职场名称\"\r\n                                name='name'\r\n                            >\r\n                                <Input placeholder=\"请输入职场名称\" autoComplete='off' onChange={this.bindName} />\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Spin>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    onHide = () => {\r\n        this.setState({\r\n            isShow: false,\r\n            workName: ''\r\n        }) \r\n    }\r\n\r\n    bindAddName = (e) => {\r\n        this.state.addForm.name = e.target.value\r\n    }\r\n    bindName = (e) => {\r\n        this.setState({\r\n            workName: e.target.value\r\n        }) \r\n        \r\n    }\r\n}\r\n\r\nexport default Workplace","C:\\Users\\EDZ\\Desktop\\呼叫中心\\callcenter\\src\\pages\\home\\user\\UserAccount.js",["140","141","142","143","144","145","146","147","148"],"import React from 'react'\r\nimport { Card, Table, Space, Spin, message, Modal, Button, Pagination, Badge, Input, Form, Select,} from 'antd';\r\nimport userApi from './../../../services/home'\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        sm: { span: 4 },\r\n    },\r\n};\r\nconst { Option } = Select;\r\nconst { confirm } = Modal;\r\nclass UserAccount extends React.Component {\r\n    state = {\r\n        loading: false,\r\n        accountTab: [],\r\n        pageIndex: 1,\r\n        pageSize: 10,\r\n        total: 0,\r\n        addForm: {\r\n            type: '',\r\n            account: '',\r\n            password: '',\r\n            url: '',\r\n            id: ''\r\n        },\r\n        isAddShow: false,\r\n        modalLoad: false,\r\n        formTit: '',\r\n        aid: '',    // 编辑id\r\n        staffData: [],\r\n        areaData: [],\r\n        isFenShow: false,\r\n        fenForm: {\r\n            type: '',\r\n            bids: []\r\n        }\r\n\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.getAccount()\r\n        this.getStaff()\r\n        this.getArea()\r\n    }\r\n\r\n    getAccount = () => {\r\n        this.setState({ loading: true })\r\n        const { pageIndex, pageSize } = this.state;\r\n        let d = {\r\n            pageIndex,\r\n            pageSize\r\n        }\r\n        userApi.accountList(d).then(res => {\r\n            if (res.code === 0) {\r\n                this.setState({\r\n                    loading: false,\r\n                    accountTab: res.data.entities,\r\n                    total: res.data.total\r\n                })\r\n            } else {\r\n                this.setState({ loading: false })\r\n                message.error('哎呀~查询失败了，请稍后重试')\r\n            }\r\n        })\r\n    }\r\n\r\n    // 获取该公司下的所有在职员工\r\n    getStaff = () => {\r\n        let d = {\r\n            pageIndex: 1,\r\n            pageSize: 1000,\r\n        }\r\n        userApi.staffList(d).then(res => {\r\n            if (res.code === 0) {\r\n                let d = res.data.entities;\r\n                this.setState({staffData: d})\r\n            } else {\r\n                message.error('在职员工获取失败~')\r\n            }\r\n        })\r\n    }\r\n\r\n    // 获取外呼系统业务区\r\n    getArea = () => {\r\n        userApi.accountArea().then(res => {\r\n            if (res.code === 0) {\r\n                this.setState({areaData: res.data})\r\n            } else {\r\n                message.error('业务区获取失败~')\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    onChange = (page) => {\r\n        this.setState({\r\n            pageIndex: page,\r\n        });\r\n        setTimeout(() => {\r\n            this.getAccount()\r\n        }, 100)\r\n\r\n    }\r\n\r\n    // form ref\r\n    formRef = React.createRef()\r\n\r\n    onEdit = (record) => {\r\n        this.setState({\r\n            isAddShow: true,\r\n            modalLoad: true,\r\n            formTit: '编辑账号'\r\n        })\r\n        this.state.addForm.id = record.id\r\n        userApi.accountDetail(record.id).then(res => {\r\n            if (res.code === 0) {\r\n                this.setState({ addForm: res.data })\r\n                this.formRef.current.setFieldsValue(res.data)\r\n                setTimeout(() => {\r\n                    this.setState({ modalLoad: false })\r\n                }, 500);\r\n            } else {\r\n                message.error(res.msg)\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    onAddShow = () => {\r\n        let { addForm } = this.state;\r\n        this.setState({\r\n            isAddShow: true,\r\n            formTit: '添加账号'\r\n        })\r\n        setTimeout(() => {\r\n            this.formRef.current.setFieldsValue(addForm)\r\n        }, 100)\r\n\r\n    }\r\n    onAddBtn = () => {\r\n        this.setState({ modalLoad: true })\r\n        let { addForm, formTit } = this.state;\r\n        if (formTit === '添加账号') {\r\n            let d = {\r\n                account: addForm.account,\r\n                password: addForm.password,\r\n                type: addForm.type,\r\n                url: addForm.url\r\n            }\r\n            userApi.accountCreate(d).then(res => {\r\n                if (res.code === 0) {\r\n                    message.success('添加成功')\r\n                    this.setState({\r\n                        isAddShow: false,\r\n                        modalLoad: false,\r\n                        addForm: {\r\n                            type: '',\r\n                            account: '',\r\n                            password: '',\r\n                            url: ''\r\n                        }\r\n                    })\r\n                    this.getAccount()\r\n                } else {\r\n                    message.error(res.msg)\r\n                }\r\n            })\r\n        } else {\r\n            let d = {\r\n                id: addForm.id,\r\n                account: addForm.account,\r\n                password: addForm.password,\r\n                type: addForm.type,\r\n                url: addForm.url\r\n            }\r\n            userApi.accountModify(d).then(res => {\r\n                if (res.code === 0) {\r\n                    message.success('修改成功')\r\n                    this.setState({\r\n                        isAddShow: false,\r\n                        modalLoad: false,\r\n                        addForm: {\r\n                            type: '',\r\n                            account: '',\r\n                            password: '',\r\n                            url: '',\r\n                            id: ''\r\n                        }\r\n                    })\r\n                    this.getAccount()\r\n                } else {\r\n                    message.error(res.msg)\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    onAddHide = () => {\r\n        this.setState({\r\n            isAddShow: false,\r\n            addForm: {\r\n                type: '',\r\n                account: '',\r\n                password: '',\r\n                url: ''\r\n            }\r\n        })\r\n    }\r\n\r\n    // 删除\r\n    onDel = (record) => {\r\n        let that = this;\r\n        confirm({\r\n            title: '确定删除该账号信息么？',\r\n            okText: '确定',\r\n            okType: 'danger',\r\n            cancelText: '取消',\r\n            onOk() {\r\n                userApi.accountRemove(record.id).then(res => {\r\n                    if (res.code === 0) {\r\n                        message.success('删除成功')\r\n                        that.getAccount()\r\n                    } else {\r\n                        message.error(res.msg)\r\n                    }\r\n                })\r\n            },\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let columns = [\r\n            {\r\n                title: '账号',\r\n                dataIndex: 'account',\r\n                key: 'account',\r\n                fixed: 'left',\r\n                align: 'center'\r\n            },\r\n            {\r\n                title: '密码',\r\n                dataIndex: 'password',\r\n                key: 'password',\r\n                align: 'center'\r\n            },\r\n            {\r\n                title: '登录链接',\r\n                dataIndex: 'url',\r\n                key: 'url',\r\n                align: 'center',\r\n                width: 200\r\n            },\r\n            {\r\n                title: '类型',\r\n                dataIndex: 'type',\r\n                key: 'type',\r\n                align: 'center'\r\n            },\r\n            {\r\n                title: '状态',\r\n                dataIndex: 'state',\r\n                key: 'state',\r\n                align: 'center',\r\n                render: text => {\r\n                    return (\r\n                        <Space size=\"middle\">\r\n                            <Badge status={text === 1 ? 'success' : 'default'} text={text === 1 ? '空闲中' : '已占用'} />\r\n                        </Space>\r\n                    )\r\n                }\r\n            },\r\n            {\r\n                title: '使用者',\r\n                dataIndex: 'username',\r\n                key: 'username',\r\n                align: 'center'\r\n            },\r\n            {\r\n                title: '创建时间',\r\n                dataIndex: 'created_at',\r\n                key: 'created_at',\r\n                align: 'center',\r\n                width: 200\r\n            },\r\n            {\r\n                title: '操作',\r\n                key: 'action',\r\n                fixed: 'right',\r\n                render: (text, record) => (\r\n                    <Space size=\"middle\">\r\n                        <a onClick={() => this.onEdit(record)}>编辑</a>\r\n                        <a onClick={() => this.onDel(record)}>删除</a>\r\n                    </Space>\r\n                ),\r\n            },\r\n        ];\r\n        const { loading, accountTab, pageIndex, pageSize, total, isAddShow, modalLoad, formTit, staffData, areaData, isFenShow } = this.state;\r\n        let role = localStorage.getItem('name');\r\n        if (role === 'Comapny') {\r\n            columns = columns.slice(0,7)\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Spin spinning={loading}>\r\n                    <Card title=\"上机账号管理\" className='apply_card'>\r\n                        <Button type='primary' style={{ display: role === 'Admin' ? 'block' : 'none', marginBottom: '20px', }} onClick={this.onAddShow}>\r\n                            添加账号\r\n                        </Button>\r\n                        <Button type='primary' style={{ display: role === 'Comapny' ? 'block' : 'none', marginBottom: '20px', }} onClick={this.onFenShow}>\r\n                            批量分配\r\n                        </Button>\r\n                        <Table columns={columns} pagination={false} bordered dataSource={accountTab} scroll={{ y: 500 }} />\r\n                        <Pagination\r\n                            style={{ margin: '20px 0', float: 'right' }}\r\n                            current={pageIndex}\r\n                            pageSize={pageSize}\r\n                            total={total}\r\n                            showTotal={total => `共 ${total} 条`}\r\n                            onChange={this.onChange}\r\n                        />\r\n                    </Card>\r\n                </Spin>\r\n                <Modal title={formTit} visible={isAddShow} onOk={this.onAddBtn} onCancel={this.onAddHide}>\r\n                    <Spin spinning={modalLoad}>\r\n                        <Form ref={this.formRef} {...formItemLayout}>\r\n                            <Form.Item\r\n                                label=\"账号\"\r\n                                name='account'\r\n                            >\r\n                                <Input placeholder=\"请输入账号\" autoComplete='off' onChange={this.bindAddAccount} />\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                                label=\"密码\"\r\n                                name='password'\r\n                            >\r\n                                <Input placeholder=\"请输入密码\" autoComplete='off' onChange={this.bindAddPass} />\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                                label=\"类型\"\r\n                                name='type'\r\n                            >\r\n                                <Input placeholder=\"请输入账号类型\" autoComplete='off' onChange={this.bindAddType} />\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                                label=\"登录链接\"\r\n                                name='url'\r\n                            >\r\n                                <Input placeholder=\"请输入登录链接\" autoComplete='off' onChange={this.bindAddUrl} />\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Spin>\r\n                </Modal>\r\n                <Modal title='分配账号' visible={isFenShow} onOk={this.onFenBtn} onCancel={this.onFenHide}>\r\n                    <Spin spinning={modalLoad}>\r\n                        <Form ref={this.fenRef} {...formItemLayout}>\r\n                            <Form.Item\r\n                                label=\"业务区\"\r\n                                name='type'\r\n                            >\r\n                                <Select placeholder=\"--请选择--\" onChange={this.onSelect}>\r\n                                    {\r\n                                        areaData.map((item, index) => {\r\n                                            return (\r\n                                                <Option key={index} value={item.type}>{item.type}</Option>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Select>\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                                label=\"分配员工\"\r\n                                name='bids'\r\n                            >\r\n                                <Select mode=\"multiple\" placeholder=\"--请选择--\"  onChange={this.onSelectId}>\r\n                                    {\r\n                                        staffData.map((item, index) => {\r\n                                            return (\r\n                                                <Option key={index} value={item.id}>{item.name}</Option>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Select>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Spin>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    bindAddType = (e) => {\r\n        this.state.addForm.type = e.target.value\r\n    }\r\n    bindAddAccount = (e) => {\r\n        this.state.addForm.account = e.target.value\r\n    }\r\n    bindAddPass = (e) => {\r\n        this.state.addForm.password = e.target.value\r\n    }\r\n    bindAddUrl = (e) => {\r\n        this.state.addForm.url = e.target.value\r\n    }\r\n\r\n    onSelect = (value) => {\r\n        this.state.fenForm.type = value\r\n    }\r\n    onSelectId = (value) =>{\r\n        this.state.fenForm.bids = value\r\n    }\r\n    \r\n    fenRef = React.createRef()\r\n    // 分配账号\r\n    onFenShow = () => {\r\n        this.setState({\r\n            isFenShow: true\r\n        })\r\n        setTimeout(() => {\r\n            this.fenRef.current.setFieldsValue(this.state.fenForm)\r\n        },100)\r\n        \r\n    }\r\n    onFenBtn = () => {\r\n        this.setState({modalLoad: true})\r\n        const {fenForm} = this.state;\r\n        let d = {\r\n            type: fenForm.type,\r\n            bids: fenForm.bids.join(',')\r\n        }\r\n        userApi.accountFen(d).then(res => {\r\n            if (res.code === 0) {\r\n                message.success('分配成功')\r\n                this.setState({\r\n                    isFenShow: false,\r\n                    modalLoad: false,\r\n                    fenForm: {\r\n                        type: '',\r\n                        bids: []\r\n                    }\r\n                })\r\n                this.getAccount()\r\n            } else {\r\n                this.setState({isFenShow: false,modalLoad: false,})\r\n                message.error('哎呀~分配失败，请稍后重试~')\r\n            }\r\n        })\r\n    }\r\n    onFenHide = () => {\r\n        this.setState({\r\n            isFenShow: false,\r\n            fenForm: {\r\n                type: '',\r\n                bids: []\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default UserAccount",{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"149","replacedBy":"153"},{"ruleId":"151","replacedBy":"154"},{"ruleId":"155","severity":1,"message":"156","line":93,"column":9,"nodeType":"157","endLine":93,"endColumn":19},{"ruleId":"158","severity":1,"message":"159","line":98,"column":26,"nodeType":"160","messageId":"161","endLine":98,"endColumn":34},{"ruleId":"158","severity":1,"message":"162","line":175,"column":15,"nodeType":"160","messageId":"161","endLine":175,"endColumn":20},{"ruleId":"155","severity":1,"message":"156","line":312,"column":9,"nodeType":"157","endLine":312,"endColumn":19},{"ruleId":"155","severity":1,"message":"156","line":376,"column":9,"nodeType":"157","endLine":376,"endColumn":19},{"ruleId":"163","severity":1,"message":"164","line":108,"column":25,"nodeType":"165","endLine":108,"endColumn":66},{"ruleId":"163","severity":1,"message":"164","line":142,"column":25,"nodeType":"165","endLine":142,"endColumn":67},{"ruleId":"163","severity":1,"message":"164","line":143,"column":25,"nodeType":"165","endLine":143,"endColumn":65},{"ruleId":"158","severity":1,"message":"166","line":2,"column":23,"nodeType":"160","messageId":"161","endLine":2,"endColumn":28},{"ruleId":"155","severity":1,"message":"156","line":66,"column":9,"nodeType":"157","endLine":66,"endColumn":28},{"ruleId":"163","severity":1,"message":"164","line":127,"column":25,"nodeType":"165","endLine":127,"endColumn":63},{"ruleId":"163","severity":1,"message":"164","line":196,"column":25,"nodeType":"165","endLine":196,"endColumn":66},{"ruleId":"163","severity":1,"message":"164","line":197,"column":25,"nodeType":"165","endLine":197,"endColumn":63},{"ruleId":"155","severity":1,"message":"156","line":279,"column":9,"nodeType":"157","endLine":279,"endColumn":27},{"ruleId":"155","severity":1,"message":"156","line":282,"column":9,"nodeType":"157","endLine":282,"endColumn":27},{"ruleId":"155","severity":1,"message":"156","line":285,"column":9,"nodeType":"157","endLine":285,"endColumn":27},{"ruleId":"163","severity":1,"message":"164","line":184,"column":25,"nodeType":"165","endLine":184,"endColumn":66},{"ruleId":"163","severity":1,"message":"164","line":185,"column":25,"nodeType":"165","endLine":185,"endColumn":63},{"ruleId":"155","severity":1,"message":"156","line":247,"column":9,"nodeType":"157","endLine":247,"endColumn":27},{"ruleId":"155","severity":1,"message":"156","line":117,"column":9,"nodeType":"157","endLine":117,"endColumn":27},{"ruleId":"163","severity":1,"message":"164","line":295,"column":25,"nodeType":"165","endLine":295,"endColumn":64},{"ruleId":"163","severity":1,"message":"164","line":296,"column":25,"nodeType":"165","endLine":296,"endColumn":63},{"ruleId":"155","severity":1,"message":"156","line":397,"column":9,"nodeType":"157","endLine":397,"endColumn":27},{"ruleId":"155","severity":1,"message":"156","line":400,"column":9,"nodeType":"157","endLine":400,"endColumn":27},{"ruleId":"155","severity":1,"message":"156","line":403,"column":9,"nodeType":"157","endLine":403,"endColumn":27},{"ruleId":"155","severity":1,"message":"156","line":406,"column":9,"nodeType":"157","endLine":406,"endColumn":27},{"ruleId":"155","severity":1,"message":"156","line":410,"column":9,"nodeType":"157","endLine":410,"endColumn":27},{"ruleId":"155","severity":1,"message":"156","line":413,"column":9,"nodeType":"157","endLine":413,"endColumn":27},"no-native-reassign",["167"],"no-negated-in-lhs",["168"],["167"],["168"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-unused-vars","'userData' is assigned a value but never used.","Identifier","unusedVar","'props' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Space' is defined but never used.","no-global-assign","no-unsafe-negation"]